"""#1222: КРИТИЧЕСКИЙ ПУТЬ
Сложность: 6 из 10
Структура ниже называется направленным графом и она состоит из набора узлов: 0, A, N и тд., а также связей между ними.
Так узлы N и Z связаны и при этом Z является потомком узла N, а N предком (родителем) узла Z:

Граф
В таблице ниже в верхней строке перечислены все узлы графа, а в нижней строке указаны их предки.

Так, например, у узла Z предком указан узел A. Обратите внимание, что на графе у узла Z два предка: A и N, однако в таблице всегда указывается один:

Таблица

Особое внимание в графе занимают узлы 0 и 1 — это начальный и конечный узлы.
Ваша задача, пользуясь таблицей, построить путь от 0 к 1. В примере выше путь будет таким: 0, A, Z, B, M, 1

В Python-коде такую таблицу лучше хранить в виде словаря, где ключ — это узел графа, а его значение — родитель:

table = {"0": None, "A": 0, ...}
Алгоритмически задача сводится к обходу такого словаря с последующим построением пути.

Полная таблица с узлами и их предками хранится в файле table.txt рядом с программой.
Файл имеет следующий формат: N1:,N2:P2,N3:P3, где N — это очередной узел.
После узла идет двоеточие, за которым следует предок этого узла.
У N1 предка нет, поэтому после двоеточия стоит пропуск, у N2 предок P2 и так далее.
Все узлы и предки разделены запятыми. Полный пример такого файла для таблицы выше выглядит так:

0:,A:0,N:A,T:N,Z:A,B:Z,M:B,X:A,1:M
Напишите, программу, которая читает файл table.txt, а затем выводит путь от 0 до 1. Узлы в пути нужно разделить запятой с пробелом:

Пример использования (на основе данных в тексте задачи):
> python path.py
> 0, A, Z, B, M, 1
Данная задача является одним из элементов более сложного алгоритма построения критического пути в теории графов.
Критические пути часто применяются в проектной деятельности для поиска узких мест при проектировании больших проектов. Это позволяет лучше контролировать и планировать сложные задачи."""

"""
Тесты
0:,A:0,N:A,T:B,Z:A,B:Z,M:B,X:A,1:M -> 0, A, Z, B, M, 1
0:,A:0,N:A,T:N,Z:N,B:,M:X,X:Z,1:M -> 0, A, N, Z, X, M, 1
1:M,A:0,N:A,T:N,0:,B:,M:X,Z:N,X:Z -> 0, A, N, Z, X, M, 1
0:,A:0,Z:0,B:A,F:S,C:B,E:C,M:E,L:M,1:L,D:B,S:M -> 0, A, B, C, E, M, L, 1
0:,Z:0,A:Z,B:A,C:G,D:C,E:0,F:E,G:F,H:C,K:E,L:K,M:G,1:D -> 0, E, F, G, C, D, 1
"""

# читаем файл
file = open('table.txt', 'r', encoding='UTF-8')

# создаем словарь по прочтенному
elem_table = {}
data = file.read().split(',')
for pair in data:
    elem, parent = pair.split(':')
    elem_table[elem] = None if parent == '' else parent

# создаем список и добавляем в нее конечный элемент '1'
result_path = ['1']

# ищем маршрут с конца и записываем его в список
while result_path[-1] != '0':
    for key, val in elem_table.items():
        if result_path[-1] == key and val is not None:
            result_path += val

# разворачиваем список и печатаем его
result_path.reverse()
print(', '.join(result_path))





