"""ВЫЧИСЛЯЕМ ЧИСЛО ПИ"""
# Существует несколько способов вычислить число Пи, один из таких способов — это воспользоваться рядом Лейбница:
#
# Ряд Лейбница
# Если мы возьмем произвольное число N, например 10, то ряд построится вплоть до 1/19.
# Далее сложив все члены ряда до 1/19 включительно, мы получим число 0.7604599047323508.
# Это будет Пи деленное на 4, поэтому умножив полученное число на 4 мы получим Пи равное 3.0418396189294032.
# Пока это далеко до идеала, но чем больше N, тем точнее будет число Пи.
#
# Напишите программу, которая первым аргументом командной строки получает целое число - N-й член ряда,
# а затем вычисляет и выводит полученное число Пи. Результат нужно вывести с 5-ю знаками после десятичной точки.
#
# Пример использования (для N=64):
# > python program.py 64
# > 3.12597

import sys
end = int(sys.argv[1])
result = 0
for n in range(end):
    result += ((-1) ** n) / (2 * n + 1)
print(f"{result * 4:.5f}")

# import sys
#
# n = int(sys.argv[1])
#
# #
# # Вариант 1 (в лоб) – управляем знаками с помощью if
# #
# pi = 0
# zn = "+"
#
# # Цикл от 1 до n * 2 с шагом 2
# for i in range(1, n * 2, 2):
#     if zn == "+":
#         pi = pi + 1 / i
#         zn = "-"
#     else:
#         pi = pi - 1 / i
#         zn = "+"
#
# print("{:.5f}".format(pi * 4))
#
# #
# # Вариант 2 - изменяем знак с помощью умножения на -1
# #
# pi = 0
# zn = 1
#
# # Цикл от 1 до n * 2 с шагом 2
# for i in range(1, n * 2, 2):
#     pi = pi + zn * (1 / i)
#     zn = zn * -1
#
# print("{:.5f}".format(pi * 4))
#
# #
# # Вариант 3 - используем математическую формулу.
# # Обратите внимание, что (-1) мы берем скобки,
# # так как у возведения в степень приоритет выше,
# # чем у операции минус.
# #
# pi = 0
#
# for i in range(n):
#     pi += ((-1) ** i) / (2 * i + 1)
#
# print("{:.5f}".format(pi * 4))