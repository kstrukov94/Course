"""ИЗМЕНЯЕМ РАЗМЕР ДИСКА"""
# Иногда на системном жестком диске заканчивается место и единственный вариант исправить положение — это установить диск большего размера.
# При такой замене мало поменять диск, нужно перенести на него все данные точь в точь без переустановки каких-либо программ.
#
# Во время такой операции также нужно учитывать,
# что на исходном диске информация может быть разбита на несколько логических блоков и тогда при переносе нужно растянуть эти блоки пропорционально.
#
# Например, на изображении ниже исходный диск имеет размер 50Gb и его первый блок занимает 10Gb.
# При переносе данных на диск объемом 100Gb, первый блок пропорционально растягивается до 20Gb:
#
#
#
# Учитывайте, что и объем дисков и объем блоков — это всегда целые числа. Может получиться, что при растягивании у вас останется свободное место.
# Это лишнее место нужно добавить к последнему блоку. Так на изображении последний блок второго диска имеет размер 22Gb: 20Gb пропорционально + 2Gb дополнительно.
#
# Создайте функцию resize_disk, которая принимает два аргумента: размер нового диска (целое число) и список с блоками на старом диске.
# Функция должна вернуть список с размерами новых блоков.
#
# Пример использования функции:
# result = resize_disk(100, [10, 10, 20, 10])
# print(result)
# [20, 20, 40, 20]
# result = resize_disk(102, [10, 10, 20, 10])
# print(result)
# [20, 20, 40, 22]
import math

def resize_disk(new_capacity, blocks):
    old_capacity = sum(blocks)
    multiplier = new_capacity / old_capacity
    for n in range(0, len(blocks)):
        blocks[n] = int(blocks[n] * multiplier)
    remainder = new_capacity - sum(blocks)
    if remainder != 0:
        blocks[-1] += remainder
    return blocks

# tests
# print(resize_disk(100, [10, 10, 20, 10]))
# print(resize_disk(102, [10, 10, 20, 10]))
# print(resize_disk(150, [15, 15, 20, 10, 40]))
# print(resize_disk(221, [50, 50]))
